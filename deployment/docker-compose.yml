version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mcp_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: mcp_system
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-mcp_secure_password_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '1'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mcp_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Agent 1: Web Scraper & Data Collector
  agent1:
    build:
      context: ../agents/agent1_scraper/agent1_scraper
      dockerfile: Dockerfile
    container_name: mcp_agent1
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://mcp_user:${DB_PASSWORD:-mcp_secure_password_2024}@postgres:5432/mcp_system
      - REDIS_URL=redis://redis:6379/0
      - AGENT_PORT=5000
    volumes:
      - agent1_data:/app/data
      - shared_uploads:/app/uploads
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 512M
          cpus: '1'

  # Agent 2: Knowledge Base Creator
  agent2:
    build:
      context: ../agents/agent2_knowledge/agent2_knowledge
      dockerfile: Dockerfile
    container_name: mcp_agent2
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://mcp_user:${DB_PASSWORD:-mcp_secure_password_2024}@postgres:5432/mcp_system
      - REDIS_URL=redis://redis:6379/1
      - AGENT_PORT=5001
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE}
    volumes:
      - agent2_data:/app/data
      - shared_uploads:/app/uploads
    ports:
      - "5001:5001"
    depends_on:
      - postgres
      - redis
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '3'
        reservations:
          memory: 1G
          cpus: '1'

  # Agent 3: Database Manager
  agent3:
    build:
      context: ../agents/agent3_database/agent3_database
      dockerfile: Dockerfile
    container_name: mcp_agent3
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://mcp_user:${DB_PASSWORD:-mcp_secure_password_2024}@postgres:5432/mcp_system
      - REDIS_URL=redis://redis:6379/2
      - AGENT_PORT=5002
    volumes:
      - agent3_data:/app/data
      - postgres_data:/app/db_backups:ro
    ports:
      - "5002:5002"
    depends_on:
      - postgres
      - redis
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 512M
          cpus: '1'

  # Agent 4: Data Transformer
  agent4:
    build:
      context: ../agents/agent4_transformer/agent4_transformer
      dockerfile: Dockerfile
    container_name: mcp_agent4
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://mcp_user:${DB_PASSWORD:-mcp_secure_password_2024}@postgres:5432/mcp_system
      - REDIS_URL=redis://redis:6379/3
      - AGENT_PORT=5003
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE}
    volumes:
      - agent4_data:/app/data
      - shared_uploads:/app/uploads
    ports:
      - "5003:5003"
    depends_on:
      - postgres
      - redis
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '3'
        reservations:
          memory: 1G
          cpus: '1'

  # Orchestrator Service
  orchestrator:
    build:
      context: ../n8n_integration/n8n_orchestrator
      dockerfile: Dockerfile
    container_name: mcp_orchestrator
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://mcp_user:${DB_PASSWORD:-mcp_secure_password_2024}@postgres:5432/mcp_system
      - REDIS_URL=redis://redis:6379/4
      - AGENT_PORT=5004
      - AGENT1_URL=http://agent1:5000
      - AGENT2_URL=http://agent2:5001
      - AGENT3_URL=http://agent3:5002
      - AGENT4_URL=http://agent4:5003
    volumes:
      - orchestrator_data:/app/data
    ports:
      - "5004:5004"
    depends_on:
      - postgres
      - redis
      - agent1
      - agent2
      - agent3
      - agent4
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 512M
          cpus: '1'

  # Web GUI
  gui:
    build:
      context: ../multi-agent-gui
      dockerfile: Dockerfile
    container_name: mcp_gui
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REACT_APP_ORCHESTRATOR_URL=https://mcp.visionvation.com/api/orchestrator
      - REACT_APP_AGENT1_URL=https://mcp.visionvation.com/api/agent1
      - REACT_APP_AGENT2_URL=https://mcp.visionvation.com/api/agent2
      - REACT_APP_AGENT3_URL=https://mcp.visionvation.com/api/agent3
      - REACT_APP_AGENT4_URL=https://mcp.visionvation.com/api/agent4
      - REACT_APP_BASE_URL=https://mcp.visionvation.com
    ports:
      - "3000:3000"
    depends_on:
      - orchestrator
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mcp_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - gui
      - orchestrator
      - agent1
      - agent2
      - agent3
      - agent4
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1'

  # System Monitor
  monitor:
    image: prom/prometheus:latest
    container_name: mcp_monitor
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: mcp_loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: mcp_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://mcp.visionvation.com/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
      - loki
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'

  # Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: mcp_cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token eyJhIjoiNjU1MjNiYzA3OWMzZjJkMzljYTEzZWE2NjIxY2Q2ZWQiLCJ0IjoiMzgyZTYwYTktNTg0My00Mjc5LWExYWMtNTMyOWExYTAzZTFhIiwicyI6Ik1tUTBZakUxWWpndFpEQTJOaTAwTVRaaExXSTRaVE10WVdFd09HUTFOMlUyWkdKayJ9
    depends_on:
      - nginx
    networks:
      - mcp_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  agent1_data:
    driver: local
  agent2_data:
    driver: local
  agent3_data:
    driver: local
  agent4_data:
    driver: local
  orchestrator_data:
    driver: local
  shared_uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mcp_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

